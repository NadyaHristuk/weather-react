{"ast":null,"code":"import _classCallCheck from \"/home/nadin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Bootcamp10/react/weather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nadin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Bootcamp10/react/weather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nadin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Bootcamp10/react/weather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nadin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Bootcamp10/react/weather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nadin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Bootcamp10/react/weather/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nadin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Bootcamp10/react/weather/src/App.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport WeatherToday from \"./WeatherToday\";\nimport \"./App.css\";\nimport Search from \"./Search\";\nvar WEATHER_KEY = \"32097cc475f84a0dac883738192204\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoading: true,\n      cityName: \"Kiev\",\n      numForecastDay: 5,\n      lat: 50.25,\n      lng: 30.3,\n      country: \"Ukraine\"\n    };\n\n    _this.getInfoMapClick = function (e) {\n      var lat = e.latLng.lat();\n      var lng = e.latLng.lng();\n      console.log(lat, lng);\n    };\n\n    _this.cityNameUpdate = function (e) {\n      e.preventDefault(); // console.log(e.target.city.value);\n\n      _this.setState({\n        cityName: e.target.city.value\n      }, function () {\n        return _this.updateWeather();\n      });\n\n      e.target.city.value = \"\"; // console.log(this.state.cityName);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"updateWeather\",\n    value: function updateWeather() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          cityName = _this$state.cityName,\n          numForecastDay = _this$state.numForecastDay;\n      var URL = \"http://api.apixu.com/v1/forecast.json?key=\".concat(WEATHER_KEY, \"&q=\").concat(cityName, \"&days=\").concat(numForecastDay);\n      axios.get(URL).then(function (res) {\n        return res.data;\n      }).then(function (data) {\n        _this2.setState({\n          isLoading: false,\n          lat: location,\n          lng: location,\n          country: location,\n          temp_c: data.current.temp_c,\n          text: data.current.condition.text,\n          iconUrl: data.current.condition.icon,\n          forecastDays: data.forecast.forecastday\n        });\n      }).catch(function (err) {\n        if (err) console.error(\"Cannot fetch Weather Data from API\", err);\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateWeather();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state2 = this.state,\n          cityName = _this$state2.cityName,\n          isLoading = _this$state2.isLoading,\n          temp_c = _this$state2.temp_c,\n          text = _this$state2.text,\n          iconUrl = _this$state2.iconUrl,\n          forecastDays = _this$state2.forecastDays,\n          lng = _this$state2.lng,\n          lat = _this$state2.lat,\n          country = _this$state2.country;\n      console.log(this.state);\n      return React.createElement(React.Fragment, null, isLoading ? React.createElement(\"div\", {\n        className: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrapLoader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        type: \"Circles\",\n        color: \"#bbb\",\n        height: \"80\",\n        width: \"80\",\n        margin: \"100px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }))) : React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        },\n        __self: this\n      }, React.createElement(WeatherToday, {\n        cityName: cityName,\n        temp_c: temp_c,\n        text: text,\n        iconUrl: iconUrl,\n        lat: lat,\n        lng: lng,\n        country: country,\n        getInfo: this.getInfoMapClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }), React.createElement(Search, {\n        getInput: this.cityNameUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/nadin/Документы/Bootcamp10/react/weather/src/App.js"],"names":["React","Component","axios","Loader","WeatherToday","Search","WEATHER_KEY","App","state","isLoading","cityName","numForecastDay","lat","lng","country","getInfoMapClick","e","latLng","console","log","cityNameUpdate","preventDefault","setState","target","city","value","updateWeather","URL","get","then","res","data","location","temp_c","current","text","condition","iconUrl","icon","forecastDays","forecast","forecastday","catch","err","error"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport Loader from \"react-loader-spinner\";\nimport WeatherToday from \"./WeatherToday\";\nimport \"./App.css\";\nimport Search from \"./Search\";\n\nconst WEATHER_KEY = \"32097cc475f84a0dac883738192204\";\n\nclass App extends Component {\n  state = {\n    isLoading: true,\n    cityName: \"Kiev\",\n    numForecastDay: 5,\n    lat: 50.25,\n    lng: 30.3,\n    country: \"Ukraine\"\n  };\n\n  getInfoMapClick = e => {\n    let lat = e.latLng.lat();\n    let lng = e.latLng.lng();\n    console.log(lat, lng);\n  };\n\n  updateWeather() {\n    const { cityName, numForecastDay } = this.state;\n    const URL = `http://api.apixu.com/v1/forecast.json?key=${WEATHER_KEY}&q=${cityName}&days=${numForecastDay}`;\n    axios\n      .get(URL)\n      .then(res => {\n        return res.data;\n      })\n      .then(data => {\n        this.setState({\n          isLoading: false,\n          lat: location,\n          lng: location,\n          country: location,\n          temp_c: data.current.temp_c,\n          text: data.current.condition.text,\n          iconUrl: data.current.condition.icon,\n          forecastDays: data.forecast.forecastday\n        });\n      })\n      .catch(err => {\n        if (err) console.error(\"Cannot fetch Weather Data from API\", err);\n      });\n  }\n\n  componentDidMount() {\n    this.updateWeather();\n  }\n\n  cityNameUpdate = e => {\n    e.preventDefault();\n    // console.log(e.target.city.value);\n    this.setState(\n      {\n        cityName: e.target.city.value\n      },\n      () => this.updateWeather()\n    );\n    e.target.city.value = \"\";\n    // console.log(this.state.cityName);\n  };\n\n  render() {\n    const {\n      cityName,\n      isLoading,\n      temp_c,\n      text,\n      iconUrl,\n      forecastDays,\n      lng,\n      lat,\n      country\n    } = this.state;\n    console.log(this.state);\n    return (\n      <>\n        {isLoading ? (\n          <div className=\"wrap\">\n            <div className=\"wrapLoader\">\n              <Loader\n                type=\"Circles\"\n                color=\"#bbb\"\n                height=\"80\"\n                width=\"80\"\n                margin=\"100px\"\n              />\n            </div>\n          </div>\n        ) : (\n          <div>\n            <WeatherToday\n              cityName={cityName}\n              temp_c={temp_c}\n              text={text}\n              iconUrl={iconUrl}\n              lat={lat}\n              lng={lng}\n              country={country}\n              getInfo={this.getInfoMapClick}\n            />\n\n            <Search getInput={this.cityNameUpdate} />\n            {/* <ul>\n              {forecastDays.map(item => (\n                <li>{item.date}</li>\n              ))}\n            </ul> */}\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}