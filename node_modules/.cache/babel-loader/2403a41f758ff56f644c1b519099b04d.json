{"ast":null,"code":"import _classCallCheck from \"/home/nadin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Bootcamp10/react/weather/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/nadin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Bootcamp10/react/weather/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/nadin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Bootcamp10/react/weather/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/nadin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Bootcamp10/react/weather/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/nadin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Bootcamp10/react/weather/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/nadin/\\u0414\\u043E\\u043A\\u0443\\u043C\\u0435\\u043D\\u0442\\u044B/Bootcamp10/react/weather/src/App.js\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Loader from \"react-loader-spinner\";\nimport WeatherToday from \"./WeatherToday\";\nimport \"./App.css\";\nimport Search from \"./Search\";\nimport { Promise } from \"rsvp\";\nimport DefaultCityImg from \"./\";\nvar WEATHER_KEY = \"32097cc475f84a0dac883738192204\";\nvar IMAGE_KEY = \"7986301-c14a62fbcda5a08a22ab81f9a\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isLoading: true,\n      cityName: \"Kiev\",\n      numForecastDay: 5,\n      bgIMG: \"\",\n      lat: 50.25,\n      lng: 30.3,\n      country: \"Ukraine\"\n    };\n\n    _this.getInfoMapClick = function (e) {\n      var lat = e.latLng.lat();\n      var lng = e.latLng.lng();\n      console.log(lat, lng);\n      var numForecastDay = _this.state.numForecastDay;\n      var URL = \"http://api.apixu.com/v1/forecast.json?key=\".concat(WEATHER_KEY, \"&q=\").concat(lat, \",\\n    \").concat(lng, \"&days=\").concat(numForecastDay);\n      console.log(URL);\n      axios.get(URL).then(function (res) {\n        return res.data;\n      }).then(function (data) {\n        _this.setState({\n          isLoading: false,\n          cityName: data.location.name,\n          lat: data.location.lat,\n          lng: data.location.lon,\n          country: data.location.country,\n          temp_c: data.current.temp_c,\n          text: data.current.condition.text,\n          iconUrl: data.current.condition.icon,\n          forecastDays: data.forecast.forecastday\n        }, function () {\n          return _this.searchImages();\n        });\n      }).catch(function (err) {\n        if (err) console.error(\"Cannot fetch Weather Data from API\", err);\n      });\n    };\n\n    _this.cityNameUpdate = function (e) {\n      e.preventDefault(); // console.log(e.target.city.value);\n\n      _this.setState({\n        cityName: e.target.city.value\n      }, function () {\n        return _this.updateWeatherAndImage(_this.state.cityName);\n      });\n\n      e.target.city.value = \"\"; // console.log(this.state.cityName);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"searchImages\",\n    value: function searchImages() {\n      var _this2 = this;\n\n      var cityName = this.state.cityName;\n      var URL = \"https://pixabay.com/api/?key=\".concat(IMAGE_KEY, \"&q=\").concat(cityName);\n      console.log(URL);\n      axios.get(URL).then(function (res) {\n        return res.data;\n      }).then(function (data) {\n        console.log(Math.floor(Math.random() * data.hits.length));\n\n        if (data.hits.length === 0) {\n          _this2.setState({\n            bgIMG: data.hits[Math.floor(Math.random() * data.hits.length)].largeImageURL\n          });\n        } else {\n          _this2.setState({\n            bgIMG: data.hits[Math.floor(Math.random() * data.hits.length)].largeImageURL\n          });\n        }\n      });\n    }\n  }, {\n    key: \"updateWeather\",\n    value: function updateWeather() {\n      var _this3 = this;\n\n      var _this$state = this.state,\n          cityName = _this$state.cityName,\n          numForecastDay = _this$state.numForecastDay;\n      var URL = \"http://api.apixu.com/v1/forecast.json?key=\".concat(WEATHER_KEY, \"&q=\").concat(cityName, \"&days=\").concat(numForecastDay);\n      axios.get(URL).then(function (res) {\n        return res.data;\n      }).then(function (data) {\n        _this3.setState({\n          isLoading: false,\n          lat: data.location.lat,\n          lng: data.location.lon,\n          country: data.location.country,\n          temp_c: data.current.temp_c,\n          text: data.current.condition.text,\n          iconUrl: data.current.condition.icon,\n          forecastDays: data.forecast.forecastday\n        });\n      }).catch(function (err) {\n        if (err) console.error(\"Cannot fetch Weather Data from API\", err);\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateWeather();\n      this.searchImages();\n    }\n  }, {\n    key: \"updateWeatherAndImage\",\n    value: function updateWeatherAndImage(value) {\n      var _this4 = this;\n\n      var _this$state2 = this.state,\n          cityName = _this$state2.cityName,\n          numForecastDay = _this$state2.numForecastDay;\n      var UpWeather = axios.get(\"http://api.apixu.com/v1/forecast.json?key=\".concat(WEATHER_KEY, \"&q=\").concat(cityName, \"&days=\").concat(numForecastDay));\n      var UpImg = axios.get(\"https://pixabay.com/api/?key=\".concat(IMAGE_KEY, \"&q=\").concat(cityName));\n      Promise.all([UpWeather, UpImg]).then(function (res) {\n        console.log(res[1].data.hits);\n\n        _this4.setState({\n          isLoading: false,\n          bgIMG: res[1].data.hits[Math.floor(Math.random() * res[1].data.hits.length)].largeImageURL,\n          cityName: res[0].data.location.name,\n          lat: res[0].data.location.lat,\n          lng: res[0].data.location.lon,\n          country: res[0].data.location.country,\n          temp_c: res[0].data.current.temp_c,\n          text: res[0].data.current.condition.text,\n          iconUrl: res[0].data.current.condition.icon,\n          forecastDays: res[0].data.forecast.forecastday\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state3 = this.state,\n          cityName = _this$state3.cityName,\n          isLoading = _this$state3.isLoading,\n          temp_c = _this$state3.temp_c,\n          text = _this$state3.text,\n          iconUrl = _this$state3.iconUrl,\n          forecastDays = _this$state3.forecastDays,\n          lng = _this$state3.lng,\n          lat = _this$state3.lat,\n          country = _this$state3.country,\n          bgIMG = _this$state3.bgIMG;\n      return React.createElement(React.Fragment, null, isLoading ? React.createElement(\"div\", {\n        className: \"wrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"wrapLoader\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Loader, {\n        type: \"Circles\",\n        color: \"#bbb\",\n        height: \"80\",\n        width: \"80\",\n        margin: \"100px\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }))) : React.createElement(\"div\", {\n        className: \"bgImage\",\n        style: {\n          backgroundImage: \"linear-gradient(\\n      rgba(255, 255, 255, 0.8),\\n      rgba(255, 255, 255, 0.1)\\n    ),url(\".concat(bgIMG, \")\")\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }, React.createElement(Search, {\n        getInput: this.cityNameUpdate,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }), React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, forecastDays.map(function (item) {\n        return React.createElement(\"li\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198\n          },\n          __self: this\n        }, item.date);\n      })), React.createElement(WeatherToday, {\n        cityName: cityName,\n        temp_c: temp_c,\n        text: text,\n        iconUrl: iconUrl,\n        lat: lat,\n        lng: lng,\n        country: country,\n        getInfo: this.getInfoMapClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/nadin/Документы/Bootcamp10/react/weather/src/App.js"],"names":["React","Component","axios","Loader","WeatherToday","Search","Promise","DefaultCityImg","WEATHER_KEY","IMAGE_KEY","App","state","isLoading","cityName","numForecastDay","bgIMG","lat","lng","country","getInfoMapClick","e","latLng","console","log","URL","get","then","res","data","setState","location","name","lon","temp_c","current","text","condition","iconUrl","icon","forecastDays","forecast","forecastday","searchImages","catch","err","error","cityNameUpdate","preventDefault","target","city","value","updateWeatherAndImage","Math","floor","random","hits","length","largeImageURL","updateWeather","UpWeather","UpImg","all","backgroundImage","map","item","date"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport Loader from \"react-loader-spinner\";\nimport WeatherToday from \"./WeatherToday\";\nimport \"./App.css\";\nimport Search from \"./Search\";\nimport { Promise } from \"rsvp\";\nimport DefaultCityImg from \"./\";\n\nconst WEATHER_KEY = \"32097cc475f84a0dac883738192204\";\nconst IMAGE_KEY = \"7986301-c14a62fbcda5a08a22ab81f9a\";\n\nclass App extends Component {\n  state = {\n    isLoading: true,\n    cityName: \"Kiev\",\n    numForecastDay: 5,\n    bgIMG: \"\",\n    lat: 50.25,\n    lng: 30.3,\n    country: \"Ukraine\"\n  };\n\n  getInfoMapClick = e => {\n    let lat = e.latLng.lat();\n    let lng = e.latLng.lng();\n    console.log(lat, lng);\n    const { numForecastDay } = this.state;\n    const URL = `http://api.apixu.com/v1/forecast.json?key=${WEATHER_KEY}&q=${lat},\n    ${lng}&days=${numForecastDay}`;\n    console.log(URL);\n    axios\n      .get(URL)\n      .then(res => {\n        return res.data;\n      })\n      .then(data => {\n        this.setState(\n          {\n            isLoading: false,\n            cityName: data.location.name,\n            lat: data.location.lat,\n            lng: data.location.lon,\n            country: data.location.country,\n            temp_c: data.current.temp_c,\n            text: data.current.condition.text,\n            iconUrl: data.current.condition.icon,\n            forecastDays: data.forecast.forecastday\n          },\n          () => this.searchImages()\n        );\n      })\n      .catch(err => {\n        if (err) console.error(\"Cannot fetch Weather Data from API\", err);\n      });\n  };\n\n  searchImages() {\n    const { cityName } = this.state;\n\n    const URL = `https://pixabay.com/api/?key=${IMAGE_KEY}&q=${cityName}`;\n    console.log(URL);\n    axios\n      .get(URL)\n      .then(res => {\n        return res.data;\n      })\n      .then(data => {\n        console.log(Math.floor(Math.random() * data.hits.length));\n        if (data.hits.length === 0) {\n          this.setState({\n            bgIMG:\n              data.hits[Math.floor(Math.random() * data.hits.length)]\n                .largeImageURL\n          });\n        } else {\n          this.setState({\n            bgIMG:\n              data.hits[Math.floor(Math.random() * data.hits.length)]\n                .largeImageURL\n          });\n        }\n      });\n  }\n\n  updateWeather() {\n    const { cityName, numForecastDay } = this.state;\n    const URL = `http://api.apixu.com/v1/forecast.json?key=${WEATHER_KEY}&q=${cityName}&days=${numForecastDay}`;\n\n    axios\n      .get(URL)\n      .then(res => {\n        return res.data;\n      })\n      .then(data => {\n        this.setState({\n          isLoading: false,\n          lat: data.location.lat,\n          lng: data.location.lon,\n          country: data.location.country,\n          temp_c: data.current.temp_c,\n          text: data.current.condition.text,\n          iconUrl: data.current.condition.icon,\n          forecastDays: data.forecast.forecastday\n        });\n      })\n      .catch(err => {\n        if (err) console.error(\"Cannot fetch Weather Data from API\", err);\n      });\n  }\n\n  componentDidMount() {\n    this.updateWeather();\n    this.searchImages();\n  }\n\n  updateWeatherAndImage(value) {\n    const { cityName, numForecastDay } = this.state;\n    let UpWeather = axios.get(\n      `http://api.apixu.com/v1/forecast.json?key=${WEATHER_KEY}&q=${cityName}&days=${numForecastDay}`\n    );\n    let UpImg = axios.get(\n      `https://pixabay.com/api/?key=${IMAGE_KEY}&q=${cityName}`\n    );\n    Promise.all([UpWeather, UpImg]).then(res => {\n      console.log(res[1].data.hits);\n      this.setState({\n        isLoading: false,\n        bgIMG:\n          res[1].data.hits[Math.floor(Math.random() * res[1].data.hits.length)]\n            .largeImageURL,\n        cityName: res[0].data.location.name,\n        lat: res[0].data.location.lat,\n        lng: res[0].data.location.lon,\n        country: res[0].data.location.country,\n        temp_c: res[0].data.current.temp_c,\n        text: res[0].data.current.condition.text,\n        iconUrl: res[0].data.current.condition.icon,\n        forecastDays: res[0].data.forecast.forecastday\n      });\n    });\n  }\n  cityNameUpdate = e => {\n    e.preventDefault();\n    // console.log(e.target.city.value);\n    this.setState(\n      {\n        cityName: e.target.city.value\n      },\n      () => this.updateWeatherAndImage(this.state.cityName)\n    );\n    e.target.city.value = \"\";\n    // console.log(this.state.cityName);\n  };\n\n  render() {\n    const {\n      cityName,\n      isLoading,\n      temp_c,\n      text,\n      iconUrl,\n      forecastDays,\n      lng,\n      lat,\n      country,\n      bgIMG\n    } = this.state;\n\n    return (\n      <>\n        {isLoading ? (\n          <div className=\"wrap\">\n            <div className=\"wrapLoader\">\n              <Loader\n                type=\"Circles\"\n                color=\"#bbb\"\n                height=\"80\"\n                width=\"80\"\n                margin=\"100px\"\n              />\n            </div>\n          </div>\n        ) : (\n          <div\n            className=\"bgImage\"\n            style={{\n              backgroundImage: `linear-gradient(\n      rgba(255, 255, 255, 0.8),\n      rgba(255, 255, 255, 0.1)\n    ),url(${bgIMG})`\n            }}\n          >\n            <Search getInput={this.cityNameUpdate} />\n            <ul>\n              {forecastDays.map(item => (\n                <li>{item.date}</li>\n              ))}\n            </ul>\n            <WeatherToday\n              cityName={cityName}\n              temp_c={temp_c}\n              text={text}\n              iconUrl={iconUrl}\n              lat={lat}\n              lng={lng}\n              country={country}\n              getInfo={this.getInfoMapClick}\n            />\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}